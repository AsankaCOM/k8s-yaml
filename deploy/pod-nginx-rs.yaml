apiVersion: apps/v1
kind: ReplicaSet
metadata:
  # All ReplicaSets must have a unique name in the namespace
  name: nginx-rs
  # The ReplicaSet can itself have labels (.metadata.labels).
  # Typically, these are the same as the .spec.template.metadata.labels.
  # However, they are allowed to be different, and the .metadata.labels do not affect the behavior of the ReplicaSet.
  labels:
    app: nginx1.7.9
    tier: frontend
# Much like a Pod, a ReplicaSet also needs a .spec section.
spec:
  # A ReplicaSet ensures that a specified number of pod replicas are running at any given time
  # Modify the replicas count according to your use case to scale the ReplicaSet
  replicas: 3
  # The .spec.selector field is a label selector
  # A ReplicaSet manages all the pods with labels that match the selector (Think => Loose Coupling)
  # It does not distinguish between pods that it created or deleted and pods that another person or process
  # created or deleted. So you can attach ReplicaSets to existing pods and manage replicas of your App
  # *non-disruptively*
  # When you manage Pods using ReplicaSets and Deployments choose labels carefully without any overlapping
  # This example shows both equality based and set based slection.
  selector:
    matchLabels:        # Equality based selection
      tier: frontend
    matchExpressions:   # Set based slection
      - {key: tier, operator: In, values: [frontend]}
  # The .spec.template is a pod template
  # It has exactly the same schema as a pod, except that it is nested and does not have an apiVersion or kind
  # A pod template in a ReplicaSet *must* specify *appropriate labels*
  # A ReplicaSet uses these labels to filter and keep track of the Pods within the cluster
  # So make sure these labels do not overlap with other Kubernetes controllers.
  # The .spec.template.metadata.labels must match the .spec.selector, or it will be rejected by the API.
  # Also, you should not normally create any pods whose labels match this selector, either directly,
  # with another ReplicaSet, or with another controller such as a Deployment. 
  # If you do so, the ReplicaSet thinks that it created the other pods and will cause confusion and affect the behavior.
  template:
    metadata:
      labels:
        app: nginx1.7.9
        tier: frontend
    spec:
      containers:    
        - name: nginx   
          image: nginx:1.7.9
          ports:
            - containerPort: 80